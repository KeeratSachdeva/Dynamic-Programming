# include<iostream>
# include<cstring> // For memset()

using namespace std;

bool DP[100][100];  // [n+1][sum+1]

int MinimumSubsetDiff(int* arr,int n)
{
    int sum = 0;
    for(int i=0;i<n;i++) sum += arr[i];  //Range Calculation

    // Filling DP Matrix
    for(int i=0;i<n+1;i++) DP[i][0] = true;
    for(int j=1;j<sum+1;j++) DP[0][j] = false;

    for(int i=1;i<n+1;i++)
    {
        for(int j=1;j<sum+1;j++)
        {
            if(arr[i-1] <= j) DP[i][j] = DP[i-1][j-arr[i-1]] || DP[i-1][j];
            else DP[i][j] = DP[i-1][j];
        }
    }

    // Now s1 will belong to [0,sum] (Not for all between 0 and sum)
    int x = sum/2 ;
    while(x >= 0)
    {
        if(DP[n][x]) return sum - 2*x;
        else x -= 1;
    }
}


int main()
{
    int n;
    cin >> n;
    int* arr = new int[n];

    for(int i=0;i<n;i++) cin >> arr[i];

    memset(DP,0,sizeof(DP));
    cout << MinimumSubsetDiff(arr,n);

    delete []arr;
}
