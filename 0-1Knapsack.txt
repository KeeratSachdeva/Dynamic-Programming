# include<iostream>
# include<cstring>    // For memset()    

using namespace std;


int KnapsackRecursive(int* weights,int* values,int W,int n)   // Recursive solution
{
    if(n == 0 || W == 0) return 0;                    // Base Case

    // Choice Diagram Code(Yes or No)
    if(weights[n-1] <= W) return max(values[n-1]+KnapsackRecursive(weights,values,W-weights[n-1],n-1),KnapsackRecursive(weights,values,W,n-1));
    // No
    else return KnapsackRecursive(weights,values,W,n-1);
}


int DP[100][100];      // Global Matrix(DP)
int KnapsackMemoization(int* weights,int* values,int W,int n)
{
    if(n == 0 || W == 0) return 0;

    if(DP[n][W] != -1) return DP[n][W];

    if(weights[n-1] <= W)
    {
        DP[n][W] = max(values[n-1] + KnapsackMemoization(weights,values,W - weights[n-1],n-1),KnapsackMemoization(weights,values,W,n-1));
        return DP[n][W];
    }
    else
    {
        DP[n][W] = KnapsackMemoization(weights,values,W,n-1);
        return DP[n][W];
    }

}


int KnapsackTopDown(int* weights,int* values,int W,int n)
{
    for(int i=0;i<n+1;i++)
    {
        for(int j=0;j<W+1;j++)
        {
            if(i == 0 || j == 0) DP[i][j] = 0;
            else
            {
                if(weights[i-1] <= j) DP[i][j] = max(values[i-1] + DP[i-1][j-weights[i-1]],DP[i-1][j]);
                else DP[i][j] = DP[i-1][j];
            }
        }
    }

    return DP[n][W];
}


int main()
{
    int n,W;
    cin >> n >> W;
    int* weights = new int[n];
    int* values = new int[n];
    for(int i=0;i<n;i++) cin >> weights[i];
    for(int i=0;i<n;i++) cin >> values[i];

    cout << KnapsackRecursive(weights,values,W,n) << endl;
    memset(DP,-1,sizeof(DP));
    cout << KnapsackMemoization(weights,values,W,n) << endl;
    memset(DP,-1,sizeof(DP));
    cout << KnapsackTopDown(weights,values,W,n);

    delete []weights;
    delete []values;
}
